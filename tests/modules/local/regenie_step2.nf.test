nextflow_process {

    name "Test Process REGENIE_STEP2"
    script "modules/local/regenie/regenie_step2_run.nf"
    process "REGENIE_STEP2_RUN"

    test("Should execute regenie step2 without predictions") {

        when {
            params {
                //set required phenotypes_column
                phenotypes_columns = 'Y1,Y2'
                regenie_test = 'additive'
                regenie_skip_predictions = true
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.fromPath("$projectDir/tests/input/regenie_step2/regenie_step1_out*")
                input[1] = Channel.fromPath("$projectDir/tests/input/pipeline/example.vcf.gz")
                .map { tuple(-1, it.baseName, it, file('dummy_a'), file('dummy_b'), -1) }
                input[2] = 'vcf'
                input[3] = file("$projectDir/tests/input/pipeline/phenotype.txt")
                input[4] = []
                input[5] = []
                input[6] = []
                input[7] = false
                """
            }
        }

        then {
            assert process.success
            //check amount of processes
            assert process.trace.tasks().size() == 1

            with(process.out) {
                with(regenie_step2_out.get(0)){

                    // access second element of first tuple
                    def lines = path(get(1)).readLinesGzip()

                    //check if regenie header is as expected
                    assert lines.get(0).equals("CHROM GENPOS ID ALLELE0 ALLELE1 A1FREQ INFO N TEST BETA.Y1 SE.Y1 CHISQ.Y1 LOG10P.Y1 BETA.Y2 SE.Y2 CHISQ.Y2 LOG10P.Y2 EXTRA")

                    //check amount of lines
                    assert lines.size() == 1001

                    //split lines and skip header
                    def rows = lines.tail()*.split(' ')
                    assert rows.size() == 1000

                    //Find all variants with LOG10P > 1 and check with expected number
                    def significantY1 = rows.findAll { (it[12] as Double) > 1}
                    def significantY2 = rows.findAll { (it[16] as Double) > 1}

                    assert significantY1.size() == 116
                    assert significantY2.size() == 127

                }

                with(regenie_step2_out_log){
                    assert path(get(0)).text.contains("--step 2")
                    assert path(get(0)).text.contains("--phenoColList Y1,Y2")
                    assert path(get(0)).text.contains("--pgen example")
                    assert path(get(0)).text.contains("--ignore-pred")
                    assert path(get(0)).text.contains("--test additive ")
                }

                assert snapshot(regenie_step2_out.get(0)).match()

            }
        }

    }

}
